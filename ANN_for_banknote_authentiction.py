# -*- coding: utf-8 -*-
"""ANN_1

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1bvcrDUFG0McA2u8jmsfFi-0UAwjSmY-x
"""

#Data Preprocessing 

#Importing required libraries
import numpy as np 
import pandas as pd 

#Importing dataset 
dataset = pd.read_csv('/content/drive/My Drive/Colab Notebooks/Bank/data_banknote_authentication.csv')

# splitting Independent and dependent variables
X = dataset.iloc[:, :-1].values
Y = dataset.iloc[:, 4].values

#Splitting dataset into training and test dataset
from sklearn.model_selection import train_test_split
X_train, X_test, Y_train, Y_test = train_test_split(X,Y, test_size = 0.2 , random_state= 0)

# Appling feature scaling on training and test dataset

from sklearn.preprocessing import StandardScaler
sc_x = StandardScaler()
X_train = sc_x.fit_transform(X_train)
X_test = sc_x.transform(X_test)

# reduced scale of training and test dataset after appling features scaling 
X_train , X_test

!pip install tensorflow==1.14

import keras

#Importing required libraries 
from keras.models import Sequential
from keras.layers import Dense

#Initialising Artificial neural network
classifier = Sequential()

# Adding input layer and first hidden layer
classifier.add(Dense(units= 4 , kernel_initializer= 'normal', activation='relu', input_dim= 4))

# Adding second hidden layer
classifier.add(Dense(units=8 , activation='relu', kernel_initializer= 'normal'))

# Adding the output layer 
classifier.add(Dense(units=1, kernel_initializer='normal', activation='sigmoid'))

# Compiling the Artificial neural network
classifier.compile(optimizer= 'adam', loss='binary_crossentropy',metrics=['accuracy'])

# Fitting the Artificial neural network to training set
classifier.fit(X_train, Y_train, batch_size= 25, epochs=100)

# Predicting results for test set 

Y_pred = (classifier.predict(X_test))
Y_pred = (Y_pred > 0.5)       # Conversion of floating values in True or false format

# storing result into list as binary format 
result = []
for i in Y_pred:
  if i == True:
    result.append(1)
  else:
    result.append(0)

#conversion of list into 1-D array
mat = np.asarray(result)
mat

# Cross validating results with confusion matrix
from sklearn.metrics import confusion_matrix
cm = confusion_matrix(Y_test, mat)

cm

print('{} % accuracy.'.format(((cm[0][0]+cm[1][1])/len(mat))*100))

